using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class Reports_SDAssigneeCallDetails : System.Web.UI.Page
{
    errorMessage msg = new errorMessage();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            FillDDLDesk();
        }
        FillNotClosedStatusPie();
        FillOpenClosedStatusPie();
    }
    private void FillDDLDesk()
    {

        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {
                DataSet ds = new DataSet();
                con.Open();
                using (SqlCommand cmd = new SqlCommand("SD_AllServiceDesks", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Option", "ALL");
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        adp.SelectCommand.CommandTimeout = 180;
                        adp.Fill(ds);
                        DropDesks.DataSource = ds;
                        DropDesks.DataTextField = "Desk";
                        DropDesks.DataValueField = "Desk";
                        DropDesks.DataBind();
                        DropDesks.Items.Insert(0, new ListItem("-----Select Service Desk-----", "0"));
                    }
                }
            }
        }
        catch (Exception ex)
        {
            //  msg.ReportError(ex.Message);
        }

    }
    protected void ImgBtnExport_Click(object sender, ImageClickEventArgs e)
    {
        if (gvAssigneeCallsStatus.Rows.Count > 0)
        {
            this.gvAssigneeCallsStatus.AllowPaging = false;
            GridViewExportUtil.Export("TicketsDetails.xls", this.gvAssigneeCallsStatus);
        }
    }

    protected void btnSearch_Click(object sender, EventArgs e)
    {
        FillNotClosedStatusPie();
        FillOpenClosedStatusPie();
        FillAllExclude();
        FillCallAging();
        FillOpenClosed();
        FillAllCategoryTicket();
    }

    private void FillOpenClosedStatusPie()
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {
                using (SqlCommand cmd = new SqlCommand("SD_ServiceDeskAssigneeCallDashboard", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                    cmd.Parameters.AddWithValue("@Option", "OpenClosedPie");
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataTable dt = new DataTable())
                        {
                            adp.Fill(dt);

                            if (dt.Rows.Count > 0)
                            {
                                Chart1.DataSource = dt;
                                Chart1.Series[0].XValueMember = "Status";
                                Chart1.Series[0].YValueMembers = "Ticket Count";
                                Chart1.DataBind();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Response.Write("Error Occured: " + ex.ToString());
        }
    }

    private void FillOpenClosed()
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {

                using (SqlCommand cmd = new SqlCommand("SD_ServiceDeskAssigneeCallDashboard", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                    cmd.Parameters.AddWithValue("@Option", "OpenClosed");
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adp.Fill(ds);

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                gvOpenClosed.DataSource = ds;
                                gvOpenClosed.DataBind();
                            }
                            else
                            {
                                gvOpenClosed.DataSource = null;
                                gvOpenClosed.DataBind();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Response.Write("Error Occured: " + ex.ToString());
        }
    }

    private void FillNotClosedStatusPie()
    {
        string chartWorkStatOs = "";
        string WorkStatcount = "";
        string WorkStatlabel = "";
        try
        {
            DataTable dt = new DataTable();
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {

                using (SqlCommand cmd = new SqlCommand("SD_ServiceDeskAssigneeCallDashboard", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                    cmd.Parameters.AddWithValue("@Option", "NotOpenClosedPie");
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {

                        adp.Fill(dt);
                        if (dt.Rows.Count > 0)
                        {

                            chartWorkStatOs += "<script>";
                            foreach (DataRow row in dt.Rows)
                            {
                                WorkStatcount += row[0] + ",";
                                WorkStatlabel += "\"" + row[1] + "\",";
                            }
                            WorkStatcount = WorkStatcount.Substring(0, WorkStatcount.Length - 1);
                            WorkStatlabel = WorkStatlabel.Substring(0, WorkStatlabel.Length - 1);
                            chartWorkStatOs += "chartWorkstationlabel = [" + WorkStatlabel + "]; chartWorkstationdata = [" + WorkStatcount + "]";
                            chartWorkStatOs += "</script>";
                            ltrcallstatus.Text = chartWorkStatOs.ToString();
                        }

                    }
                }
            }
        }
        catch (Exception ex)
        {
            Response.Write("Error Occured: " + ex.ToString());
        }
    }

    private void FillCallAging()
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {

                using (SqlCommand cmd = new SqlCommand("SD_ServiceDeskCallAgingDashboard", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                    cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    cmd.Parameters.AddWithValue("@Option", "Age");
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataTable dt = new DataTable())
                        {
                            adp.Fill(dt);

                            if (dt.Rows.Count > 0)
                            {
                                gvCallAging.DataSource = dt;
                                gvCallAging.DataBind();
                                //Calculate Sum and display in Footer Row

                                gvCallAging.FooterRow.Cells[0].Text = "Total";
                                gvCallAging.FooterRow.Cells[0].HorizontalAlign = HorizontalAlign.Right;

                                gvCallAging.FooterRow.Cells[1].Text = (dt.AsEnumerable().Sum(row => row.Field<int?>("0 to 3 Days") ?? 0)).ToString();
                                gvCallAging.FooterRow.Cells[2].Text = (dt.AsEnumerable().Sum(row => row.Field<int?>("4 to 7 Days") ?? 0)).ToString();
                                gvCallAging.FooterRow.Cells[3].Text = (dt.AsEnumerable().Sum(row => row.Field<int?>("8 to 10 Days") ?? 0)).ToString();
                                gvCallAging.FooterRow.Cells[4].Text = (dt.AsEnumerable().Sum(row => row.Field<int?>("More than 10 Days") ?? 0)).ToString();
                            }
                            else
                            {
                                gvCallAging.DataSource = null;
                                gvCallAging.DataBind();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Response.Write("Error Occured: " + ex.ToString());
        }
    }

    private void FillAllExclude()
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {

                using (SqlCommand cmd = new SqlCommand("SD_ServiceDeskAssigneeCallDashboard", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                    cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    cmd.Parameters.AddWithValue("@Option", "NotOpenClosed");
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adp.Fill(ds);

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                lblTotal.Text = "0";
                                lblTotal.Text = ds.Tables[0].Rows.Count.ToString();
                                gvAssigneeCallsStatus.DataSource = ds;
                                gvAssigneeCallsStatus.DataBind();
                            }
                            else
                            {
                                gvAssigneeCallsStatus.DataSource = null;
                                gvAssigneeCallsStatus.DataBind();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Response.Write("Error Occured: " + ex.ToString());
        }
    }

    protected void gvAssigneeCallsStatus_DataBound(object sender, EventArgs e)
    {
        try
        {
            if (gvAssigneeCallsStatus.Rows.Count > 0)
            {
                int TotalRows = gvAssigneeCallsStatus.Rows.Count;
                int TotalCol = gvAssigneeCallsStatus.Rows[0].Cells.Count;
                gvAssigneeCallsStatus.FooterRow.Cells[0].Text = "Total : ";

                for (int i = 1; i < TotalCol; i++)
                {
                    int sum = 0;
                    for (int j = 0; j < TotalRows; j++)
                    {
                        sum += gvAssigneeCallsStatus.Rows[j].Cells[i].Text != "&nbsp;" ? int.Parse(gvAssigneeCallsStatus.Rows[j].Cells[i].Text) : 0;
                        gvAssigneeCallsStatus.Rows[j].Cells[i].Text = gvAssigneeCallsStatus.Rows[j].Cells[i].Text != "&nbsp;" ? gvAssigneeCallsStatus.Rows[j].Cells[i].Text : "0";
                    }
                    gvAssigneeCallsStatus.FooterRow.Cells[i].Text = sum.ToString("#");

                }
            }

        }

        catch (Exception ex)
        {
            msg.ReportError(ex.Message);

        }
    }

    protected void gvOpenClosed_RowCommand(object sender, GridViewCommandEventArgs e)
    {


    }

    private static string AssigneeName;
    private static string HeaderName;
    protected void gvCallAging_RowCommand(object sender, GridViewCommandEventArgs e)
    {

        if (e.CommandName == "VIEW0to3")
        {
            LinkButton lnkView0to3 = (LinkButton)e.CommandSource;
            AssigneeName = lnkView0to3.CommandArgument;
            HeaderName = gvCallAging.HeaderRow.Cells[1].Text;
            FillAgingDetails();
        }
        if (e.CommandName == "VIEW4to7")
        {
            LinkButton lnkView4to7 = (LinkButton)e.CommandSource;
            AssigneeName = lnkView4to7.CommandArgument;
            HeaderName = gvCallAging.HeaderRow.Cells[2].Text;
            FillAgingDetails();
        }
        if (e.CommandName == "VIEW8to10")
        {
            LinkButton lnkView8to10 = (LinkButton)e.CommandSource;
            AssigneeName = lnkView8to10.CommandArgument;
            HeaderName = gvCallAging.HeaderRow.Cells[3].Text;
            FillAgingDetails();
        }
        if (e.CommandName == "VIEWMore10Days")
        {
            LinkButton lnkViewMore10Days = (LinkButton)e.CommandSource;
            AssigneeName = lnkViewMore10Days.CommandArgument;
            HeaderName = gvCallAging.HeaderRow.Cells[4].Text;
            FillAgingDetails();
        }
    }

    private void FillAgingDetails()
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {

                using (SqlCommand cmd = new SqlCommand("SD_ServiceDeskCallAgingDashboard", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                    cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    cmd.Parameters.AddWithValue("@Aging", HeaderName);
                    cmd.Parameters.AddWithValue("@Assignee", AssigneeName);
                    cmd.Parameters.AddWithValue("@Option", "AgeDetails");
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataTable dt = new DataTable())
                        {
                            adp.Fill(dt);

                            if (dt.Rows.Count > 0)
                            {
                                lblTotal.Text = "0";
                                lblTotal.Text = dt.Rows.Count.ToString();
                                gvCallAgingDetails.DataSource = dt;
                                gvCallAgingDetails.DataBind();
                            }
                            else
                            {
                                gvCallAgingDetails.DataSource = null;
                                gvCallAgingDetails.DataBind();
                                lblTotal.Text = "0";
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Response.Write("Error Occured: " + ex.ToString());
        }
    }

    protected void ImgbtnCallAgingExport_Click(object sender, ImageClickEventArgs e)
    {
        if (gvCallAging.Rows.Count > 0)
        {
            this.gvCallAging.AllowPaging = false;
            GridViewExportUtil.Export("TicketsCallAgingDetails.xls", this.gvCallAging);
        }
    }

    protected void gvAssigneeCallsStatus_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    protected void ChartCallsStatus_Click(object sender, ImageMapEventArgs e)
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                con.Open();
                string cmdstr = "SD_ServiceDeskAssigneeCallDashboard";
                using (SqlCommand cmd = new SqlCommand(cmdstr, con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        adp.SelectCommand.CommandTimeout = 180;
                        cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                        cmd.Parameters.AddWithValue("@Status", e.PostBackValue);
                        cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                        cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                        cmd.Parameters.AddWithValue("@Option", "TicketDetails");
                        adp.Fill(ds);
                        lblTotal.Text = "0";
                        lblTotal.Text = ds.Tables[0].Rows.Count.ToString();
                        gvCallAgingDetails.DataSource = ds;
                        gvCallAgingDetails.DataBind();
                    }
                }
            }
        }

        catch (Exception ex)
        {
            msg.ReportError(ex.Message);

        }
    }

    protected void ChartCallsStatus_Load(object sender, EventArgs e)
    {

    }

    protected void gridviewcategory_DataBound(object sender, EventArgs e)
    {
        try
        {
            if (gridviewcategory.Rows.Count > 0)
            {
                int TotalRows = gridviewcategory.Rows.Count;
                int TotalCol = gridviewcategory.Rows[0].Cells.Count;
                gridviewcategory.FooterRow.Cells[0].Text = "Total : ";

                for (int i = 1; i < TotalCol; i++)
                {
                    int sum = 0;
                    for (int j = 0; j < TotalRows; j++)
                    {
                        sum += gridviewcategory.Rows[j].Cells[i].Text != "&nbsp;" ? int.Parse(gridviewcategory.Rows[j].Cells[i].Text) : 0;
                        gridviewcategory.Rows[j].Cells[i].Text = gridviewcategory.Rows[j].Cells[i].Text != "&nbsp;" ? gridviewcategory.Rows[j].Cells[i].Text : "0";
                    }
                    gridviewcategory.FooterRow.Cells[i].Text = sum.ToString("#");

                }
            }

        }

        catch (Exception ex)
        {
            msg.ReportError(ex.Message);

        }
    }
    private void FillAllCategoryTicket()
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {

                using (SqlCommand cmd = new SqlCommand("SD_ServiceDeskAssigneeCallDashboard", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                    cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                    cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                    cmd.Parameters.AddWithValue("@Option", "categorywiseopenclosed");
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataTable ds = new DataTable())
                        {
                            adp.Fill(ds);

                            if (ds.Rows.Count > 0)
                            {
                                lblTotal.Text = "0";
                                lblTotal.Text = ds.Rows.Count.ToString();
                                gridviewcategory.DataSource = ds;
                                gridviewcategory.DataBind();
                            }
                            else
                            {
                                gridviewcategory.DataSource = null;
                                gridviewcategory.DataBind();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Response.Write("Error Occured: " + ex.ToString());
        }
    }

    protected void ImageButton2_Click(object sender, ImageClickEventArgs e)
    {
        if (gridviewcategory.Rows.Count > 0)
        {
            this.gridviewcategory.AllowPaging = false;
            GridViewExportUtil.Export("TicketsDetails.xls", this.gridviewcategory);
        }
    }

    protected void btnchartcallstatus_Click(object sender, EventArgs e)
    {
        try
        {
            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["con"].ConnectionString))
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                con.Open();
                string cmdstr = "SD_ServiceDeskAssigneeCallDashboard";
                using (SqlCommand cmd = new SqlCommand(cmdstr, con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        adp.SelectCommand.CommandTimeout = 180;
                        cmd.Parameters.AddWithValue("@ServiceDesk", DropDesks.SelectedItem.ToString());
                        cmd.Parameters.AddWithValue("@Status", hdnfldVariable.Value);
                        cmd.Parameters.AddWithValue("@FROM", txtFrom.Text);
                        cmd.Parameters.AddWithValue("@OrgId", Session["Orgid"].ToString());
                        cmd.Parameters.AddWithValue("@TO", txtTo.Text);
                        cmd.Parameters.AddWithValue("@Option", "TicketDetails");
                        adp.Fill(ds);
                        lblTotal.Text = "0";
                        lblTotal.Text = ds.Tables[0].Rows.Count.ToString();
                        gvCallAgingDetails.DataSource = ds;
                        gvCallAgingDetails.DataBind();
                    }
                }
            }
        }

        catch (Exception ex)
        {
            msg.ReportError(ex.Message);

        }
    }
}